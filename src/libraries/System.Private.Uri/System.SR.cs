// <auto-generated>
using System.Reflection;

namespace FxResources.System.Private.Uri
{
    internal static class SR { }
}
namespace System
{
    internal static partial class SR
    {
        private static global::System.Resources.ResourceManager s_resourceManager;
        internal static global::System.Resources.ResourceManager ResourceManager => s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(FxResources.System.Private.Uri.SR)));

        /// <summary>An item with the same key has already been added. Key: {0}</summary>
        internal static string @Argument_AddingDuplicate => GetResourceString("Argument_AddingDuplicate", @"An item with the same key has already been added. Key: {0}");
        /// <summary>Invalid URI: The Authority/Host could not be parsed.</summary>
        internal static string @net_uri_BadAuthority => GetResourceString("net_uri_BadAuthority", @"Invalid URI: The Authority/Host could not be parsed.");
        /// <summary>Invalid URI: The Authority/Host cannot end with a backslash character ('\\').</summary>
        internal static string @net_uri_BadAuthorityTerminator => GetResourceString("net_uri_BadAuthorityTerminator", @"Invalid URI: The Authority/Host cannot end with a backslash character ('\\').");
        /// <summary>Invalid URI: The format of the URI could not be determined.</summary>
        internal static string @net_uri_BadFormat => GetResourceString("net_uri_BadFormat", @"Invalid URI: The format of the URI could not be determined.");
        /// <summary>The URI parser instance passed into 'uriParser' parameter is already registered with the scheme name '{0}'.</summary>
        internal static string @net_uri_NeedFreshParser => GetResourceString("net_uri_NeedFreshParser", @"The URI parser instance passed into 'uriParser' parameter is already registered with the scheme name '{0}'.");
        /// <summary>A URI scheme name '{0}' already has a registered custom parser.</summary>
        internal static string @net_uri_AlreadyRegistered => GetResourceString("net_uri_AlreadyRegistered", @"A URI scheme name '{0}' already has a registered custom parser.");
        /// <summary>Invalid URI: The hostname could not be parsed.</summary>
        internal static string @net_uri_BadHostName => GetResourceString("net_uri_BadHostName", @"Invalid URI: The hostname could not be parsed.");
        /// <summary>Invalid URI: Invalid port specified.</summary>
        internal static string @net_uri_BadPort => GetResourceString("net_uri_BadPort", @"Invalid URI: Invalid port specified.");
        /// <summary>Invalid URI: The URI scheme is not valid.</summary>
        internal static string @net_uri_BadScheme => GetResourceString("net_uri_BadScheme", @"Invalid URI: The URI scheme is not valid.");
        /// <summary>Invalid URI: The username:password construct is badly formed.</summary>
        internal static string @net_uri_BadUserPassword => GetResourceString("net_uri_BadUserPassword", @"Invalid URI: The username:password construct is badly formed.");
        /// <summary>A relative URI cannot be created because the 'uriString' parameter represents an absolute URI.</summary>
        internal static string @net_uri_CannotCreateRelative => GetResourceString("net_uri_CannotCreateRelative", @"A relative URI cannot be created because the 'uriString' parameter represents an absolute URI.");
        /// <summary>Invalid URI: The Uri scheme is too long.</summary>
        internal static string @net_uri_SchemeLimit => GetResourceString("net_uri_SchemeLimit", @"Invalid URI: The Uri scheme is too long.");
        /// <summary>Invalid URI: The URI is empty.</summary>
        internal static string @net_uri_EmptyUri => GetResourceString("net_uri_EmptyUri", @"Invalid URI: The URI is empty.");
        /// <summary>The value '{0}' passed for the UriKind parameter is invalid.</summary>
        internal static string @net_uri_InvalidUriKind => GetResourceString("net_uri_InvalidUriKind", @"The value '{0}' passed for the UriKind parameter is invalid.");
        /// <summary>Invalid URI: A Dos path must be rooted, for example, 'c:\\'.</summary>
        internal static string @net_uri_MustRootedPath => GetResourceString("net_uri_MustRootedPath", @"Invalid URI: A Dos path must be rooted, for example, 'c:\\'.");
        /// <summary>This operation is not supported for a relative URI.</summary>
        internal static string @net_uri_NotAbsolute => GetResourceString("net_uri_NotAbsolute", @"This operation is not supported for a relative URI.");
        /// <summary>A derived type '{0}' has reported an invalid value for the Uri port '{1}'.</summary>
        internal static string @net_uri_PortOutOfRange => GetResourceString("net_uri_PortOutOfRange", @"A derived type '{0}' has reported an invalid value for the Uri port '{1}'.");
        /// <summary>Invalid URI: The Uri string is too long.</summary>
        internal static string @net_uri_SizeLimit => GetResourceString("net_uri_SizeLimit", @"Invalid URI: The Uri string is too long.");
        /// <summary>A derived type '{0}' is responsible for parsing this Uri instance. The base implementation must not be used.</summary>
        internal static string @net_uri_UserDrivenParsing => GetResourceString("net_uri_UserDrivenParsing", @"A derived type '{0}' is responsible for parsing this Uri instance. The base implementation must not be used.");
        /// <summary>UriComponents.SerializationInfoString must not be combined with other UriComponents.</summary>
        internal static string @net_uri_NotJustSerialization => GetResourceString("net_uri_NotJustSerialization", @"UriComponents.SerializationInfoString must not be combined with other UriComponents.");
        /// <summary>An invalid Unicode character by IDN standards was specified in the host.</summary>
        internal static string @net_uri_BadUnicodeHostForIdn => GetResourceString("net_uri_BadUnicodeHostForIdn", @"An invalid Unicode character by IDN standards was specified in the host.");
        /// <summary>Extra portion of URI not valid.</summary>
        internal static string @Argument_ExtraNotValid => GetResourceString("Argument_ExtraNotValid", @"Extra portion of URI not valid.");
        /// <summary>The subcomponent, {0}, of this uri is not valid.</summary>
        internal static string @Argument_InvalidUriSubcomponent => GetResourceString("Argument_InvalidUriSubcomponent", @"The subcomponent, {0}, of this uri is not valid.");
        /// <summary>The given key '{0}' was not present in the dictionary.</summary>
        internal static string @Arg_KeyNotFoundWithKey => GetResourceString("Arg_KeyNotFoundWithKey", @"The given key '{0}' was not present in the dictionary.");
        /// <summary>Null is not a valid value for {0}.</summary>
        internal static string @InvalidNullArgument => GetResourceString("InvalidNullArgument", @"Null is not a valid value for {0}.");
        /// <summary>UriParser's base InitializeAndValidate may only be called once on a single Uri instance and only from an override of InitializeAndValidate.</summary>
        internal static string @net_uri_InitializeCalledAlreadyOrTooLate => GetResourceString("net_uri_InitializeCalledAlreadyOrTooLate", @"UriParser's base InitializeAndValidate may only be called once on a single Uri instance and only from an override of InitializeAndValidate.");
        /// <summary>GetComponents() may not be used for Path/Query on a Uri instance created with UriCreationOptions.DangerousDisablePathAndQueryCanonicalization.</summary>
        internal static string @net_uri_GetComponentsCalledWhenCanonicalizationDisabled => GetResourceString("net_uri_GetComponentsCalledWhenCanonicalizationDisabled", @"GetComponents() may not be used for Path/Query on a Uri instance created with UriCreationOptions.DangerousDisablePathAndQueryCanonicalization.");

    }
}
